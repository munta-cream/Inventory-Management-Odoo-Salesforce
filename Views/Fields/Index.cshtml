@model List<CustomField>

<div class="fields-container">
    <h3>Custom Fields</h3>
    <div class="mb-3">
        <a href="@Url.Action("Create", "Fields", new { inventoryId = ViewBag.InventoryId })" class="btn btn-primary">Add New Field</a>
    </div>
    
    @if (Model != null && Model.Any())
    {
        <div id="fields-sortable" class="sortable-container">
            @foreach (var field in Model)
            {
                <div class="field-item card mb-2" data-field-id="@field.Id">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="card-title">@field.Title</h5>
                            <p class="card-text">
                                <span class="badge bg-secondary">@field.Type</span>
                                @if (field.ShowInTableView)
                                {
                                    <span class="badge bg-info">Shown in table</span>
                                }
                            </p>
                        </div>
                        <div>
                            <a href="@Url.Action("Edit", "Fields", new { id = field.Id })" class="btn btn-warning btn-sm">Edit</a>
                            <form action="@Url.Action("Delete", "Fields", new { id = field.Id })" method="post" style="display:inline;">
                                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <button id="save-order" class="btn btn-success mt-3" style="display: none;">Save Field Order</button>
    }
    else
    {
        <div class="alert alert-info">No custom fields available.</div>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const sortable = new Sortable(document.getElementById('fields-sortable'), {
                animation: 150,
                onEnd: function(evt) {
                    document.getElementById('save-order').style.display = 'block';
                }
            });

            document.getElementById('save-order').addEventListener('click', function() {
                const fieldIds = [];
                document.querySelectorAll('#fields-sortable .field-item').forEach(item => {
                    fieldIds.push(parseInt(item.dataset.fieldId));
                });

                fetch('@Url.Action("Reorder", "Fields")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        inventoryId: @ViewBag.InventoryId,
                        fieldIds: fieldIds
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('save-order').style.display = 'none';
                        alert('Field order saved successfully!');
                    } else {
                        alert('Error saving field order.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error saving field order.');
                });
            });
        });
    </script>
}
